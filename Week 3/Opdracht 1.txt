# define F_CPU 8000000UL

#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>

#define LCD_E    3
#define LCD_RS    2

void writeInitCommand_strobe_e(unsigned char byte);

void write2NibbleCommand_strobe_e(unsigned char byte);

void write2NibbleData_Strobe_E(unsigned char byte);

void init(void);

void display_text(char *str);

void set_cursor(int position);

void lcd_clear();

int cursor = 0;

int main(void) {
    DDRA = 0xFF;
    PORTA = 0x00;
    DDRD &= ~(1 << 7);

    TCCR2 = 0b00000111;
    TCNT2 = 0;

    DDRC = 0xFF;
    PORTC = 0x00;

	init();
    lcd_clear();

    int last_val = -1;
    while (1) {
        int val = TCNT2;

        if (last_val != val) {
            last_val = val;

            char *text = malloc(sizeof(char) * 3);
            itoa(val, text, 10);

			lcd_clear();
			display_text(text);
			
            free(text);

            PORTA = val;
        }

        set_cursor(1);
    }

    return 0;
}

void writeInitCommand_strobe_e(unsigned char byte) {
    byte &= 0xF0;
    PORTC = byte | (1 << LCD_E);
    _delay_ms(1);
    PORTC &= ~(1 << LCD_E);
    _delay_ms(1);
}

void write2NibbleCommand_strobe_e(unsigned char byte) {
    unsigned char firstNibble = byte & 0xF0;
    PORTC = firstNibble | (1 << LCD_E);
    _delay_ms(1);
    PORTC &= ~(1 << LCD_E);
    _delay_ms(1);

    unsigned char secondNibble = (byte << 4) & 0xF0;
    PORTC = secondNibble | (1 << LCD_E);
    _delay_ms(1);
    PORTC &= ~(1 << LCD_E);
    _delay_ms(1);
}

void write2NibbleData_Strobe_E(unsigned char byte) {
    unsigned char firstNibble = byte & 0xF0;
    firstNibble |= (1 << LCD_RS);
    PORTC = firstNibble | (1 << LCD_E);
    _delay_ms(1);
    PORTC &= ~(1 << LCD_E);
    _delay_ms(1);

    unsigned char secondNibble = (byte << 4) & 0xF0;
    secondNibble &= 0xF0;
    secondNibble |= (1 << LCD_RS);
    PORTC = secondNibble | (1 << LCD_E);
    _delay_ms(1);
    PORTC &= ~(1 << LCD_E);
    _delay_ms(1);
}

void init(void) {
    writeInitCommand_strobe_e(0x20);

    write2NibbleCommand_strobe_e(0x28);

    write2NibbleCommand_strobe_e(0x0F);

    write2NibbleCommand_strobe_e(0x06);
}

void display_text(char *str) {
    while (*str) {
        cursor++;

        write2NibbleData_Strobe_E(*str++);
    }
}

void set_cursor(int position) {
    int difference = position - (cursor + 1);

    if (difference > 0) {
        for (int i = 0; i < difference; i++) {
            write2NibbleCommand_strobe_e(0b00010100);
        }
    } else {
        for (int i = 0; i > difference; i--) {
            write2NibbleCommand_strobe_e(0b00010000);
        }
    }
}

void lcd_clear() {
    write2NibbleCommand_strobe_e(0x01);
}